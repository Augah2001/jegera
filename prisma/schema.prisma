// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  email                String        @unique
  firstName            String
  lastName             String
  password             String
  authorizationKey     String?      @unique
  accountType          type
  isOnline             Boolean       @default(false)
  sentTransactions     Transaction[] @relation("TransactionToSender")
  receivedTransactions Transaction[] @relation("TransactionToReceiver")
  sentMessages         Message[]     @relation("MessageTo")
  receivedMessages     Message[]     @relation("MessageFrom")
  Chats                Chat[]
  isAuthorizer         Boolean       @default(false)
  gender               genderType
  logins               Login[]
  houses               House[]
  backgroundImage      String        @default("images/profile_pictures/user_placeholder_xsx9ws") 
  
}

model Chat {
  id   String    @id
  users    User[]
  messages Message[]
  updated               DateTime? @updatedAt()
}

model Auth {
  authorizationKey String @unique
  fullName   String
}
model HouseAuth {
  authorizationKey String @unique
  fullName   String
}

model Location {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  coordinates Float[] @unique
  houses      House[]
}

model Message {
  id         Int      @id @default(autoincrement())
  chatId     String
  sender     User     @relation("MessageFrom", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("MessageTo", fields: [receiverId], references: [id])
  receiverId Int
  body       String
  time       DateTime @default(now())
  sentByMe   Boolean
  chat       Chat     @relation(fields: [chatId], references: [id])
}

model Transaction {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("TransactionToSender", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("TransactionToReceiver", fields: [receiverId], references: [id])
  receiverId Int
  amount     Int
  time       DateTime @default(now())
  house  House @relation(fields: [houseId], references: [id])
  houseId Int
}

enum status {
  read
  sent
}

enum type {
  tenant
  landlord
  authorizer
}

enum genderType {
  male
  female
}

model Login {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model House {
  id              Int       @id @default(autoincrement())
  location        Location  @relation(fields: [locationId], references: [id])
  locationId      Int
  houseNumber     Int
  street          String?
  description     String?
  price           Float
  minutes         Int
  capacity        Int
  occupied        Int       @default(0)
  perRoom         Int
  gender          Gender
  images          String[]
  backgroundImage String?

  owner           User      @relation(fields: [ownerId], references: [id])
  ownerId         Int
  coordinates     Float[]
  services        Service[]
  authorizationKey  String   @default("augah")
  predictedPrice Float? 
  transactions Transaction[]
}

model Service {

  name   String  @unique @id
  houses House[]

}

enum Gender {
  girls
  boys
  both
}
